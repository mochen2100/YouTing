package de.greenrobot.daoexample;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.greenrobot.daoexample.Music;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MUSIC.
*/
public class MusicDao extends AbstractDao<Music, Long> {

    public static final String TABLENAME = "MUSIC";

    /**
     * Properties of entity Music.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uid = new Property(0, Long.class, "uid", true, "UID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Artist = new Property(2, String.class, "artist", false, "ARTIST");
        public final static Property Cache_url = new Property(3, String.class, "cache_url", false, "CACHE_URL");
        public final static Property Url = new Property(4, String.class, "url", false, "URL");
        public final static Property Lrc_url = new Property(5, String.class, "lrc_url", false, "LRC_URL");
        public final static Property Lrc_cache_url = new Property(6, String.class, "lrc_cache_url", false, "LRC_CACHE_URL");
        public final static Property Pic_url = new Property(7, String.class, "pic_url", false, "PIC_URL");
        public final static Property IsLocal = new Property(8, Boolean.class, "isLocal", false, "IS_LOCAL");
    };


    public MusicDao(DaoConfig config) {
        super(config);
    }
    
    public MusicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MUSIC' (" + //
                "'UID' INTEGER PRIMARY KEY ," + // 0: uid
                "'NAME' TEXT," + // 1: name
                "'ARTIST' TEXT," + // 2: artist
                "'CACHE_URL' TEXT," + // 3: cache_url
                "'URL' TEXT," + // 4: url
                "'LRC_URL' TEXT," + // 5: lrc_url
                "'LRC_CACHE_URL' TEXT," + // 6: lrc_cache_url
                "'PIC_URL' TEXT," + // 7: pic_url
                "'IS_LOCAL' INTEGER);"); // 8: isLocal
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MUSIC'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Music entity) {
        stmt.clearBindings();
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(1, uid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(3, artist);
        }
 
        String cache_url = entity.getCache_url();
        if (cache_url != null) {
            stmt.bindString(4, cache_url);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(5, url);
        }
 
        String lrc_url = entity.getLrc_url();
        if (lrc_url != null) {
            stmt.bindString(6, lrc_url);
        }
 
        String lrc_cache_url = entity.getLrc_cache_url();
        if (lrc_cache_url != null) {
            stmt.bindString(7, lrc_cache_url);
        }
 
        String pic_url = entity.getPic_url();
        if (pic_url != null) {
            stmt.bindString(8, pic_url);
        }
 
        Boolean isLocal = entity.getIsLocal();
        if (isLocal != null) {
            stmt.bindLong(9, isLocal ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Music readEntity(Cursor cursor, int offset) {
        Music entity = new Music( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // uid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // artist
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cache_url
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lrc_url
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lrc_cache_url
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // pic_url
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0 // isLocal
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Music entity, int offset) {
        entity.setUid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setArtist(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCache_url(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLrc_url(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLrc_cache_url(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPic_url(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsLocal(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Music entity, long rowId) {
        entity.setUid(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Music entity) {
        if(entity != null) {
            return entity.getUid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
