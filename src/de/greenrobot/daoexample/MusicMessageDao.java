package de.greenrobot.daoexample;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.greenrobot.daoexample.MusicMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MUSIC_MESSAGE.
*/
public class MusicMessageDao extends AbstractDao<MusicMessage, Long> {

    public static final String TABLENAME = "MUSIC_MESSAGE";

    /**
     * Properties of entity MusicMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_id = new Property(1, Long.class, "user_id", false, "USER_ID");
        public final static Property Sender_id = new Property(2, Long.class, "sender_id", false, "SENDER_ID");
        public final static Property Music_id = new Property(3, Long.class, "music_id", false, "MUSIC_ID");
        public final static Property Category = new Property(4, String.class, "category", false, "CATEGORY");
        public final static Property Message = new Property(5, String.class, "message", false, "MESSAGE");
        public final static Property Pic_url = new Property(6, String.class, "pic_url", false, "PIC_URL");
    };


    public MusicMessageDao(DaoConfig config) {
        super(config);
    }
    
    public MusicMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MUSIC_MESSAGE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'USER_ID' INTEGER," + // 1: user_id
                "'SENDER_ID' INTEGER," + // 2: sender_id
                "'MUSIC_ID' INTEGER," + // 3: music_id
                "'CATEGORY' TEXT," + // 4: category
                "'MESSAGE' TEXT," + // 5: message
                "'PIC_URL' TEXT);"); // 6: pic_url
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MUSIC_MESSAGE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MusicMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(2, user_id);
        }
 
        Long sender_id = entity.getSender_id();
        if (sender_id != null) {
            stmt.bindLong(3, sender_id);
        }
 
        Long music_id = entity.getMusic_id();
        if (music_id != null) {
            stmt.bindLong(4, music_id);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(5, category);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(6, message);
        }
 
        String pic_url = entity.getPic_url();
        if (pic_url != null) {
            stmt.bindString(7, pic_url);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MusicMessage readEntity(Cursor cursor, int offset) {
        MusicMessage entity = new MusicMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // sender_id
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // music_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // category
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // message
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // pic_url
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MusicMessage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setSender_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setMusic_id(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setCategory(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMessage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPic_url(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MusicMessage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MusicMessage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
